Array.prototype.weightedRandom=function(a){var b=Math.floor,d=Math.min,e=Math.max;let f=[];if(!a||!this[0][a]&&0!==this[0][a]||"number"!=typeof this[0][a]){throw console.log("Value was",a,"Array was",this),new Error("Must specify numerical property!")}if(1==this.length)return 0;else{const g=e(...this.map(b=>b[a])),h=d(...this.map(b=>b[a]));return this.forEach((d,e)=>{const i=b(100*(d[a]-h)/(g-h));!i||(f=f.concat(Array(i).fill(e)))}),h==g?b(Math.random()*this.length):f[b(Math.random()*f.length)]}};class Output{constructor(a,b,d){this.name=a,this._id=Math.floor(1e19*Math.random()).toString(32),this.outs=[],this.layer=d,this.num=b,this.isOn=!1,this.inpNum=0,this.inpLastTime=0,this.isOut=!0}}class Neuron{constructor(a,b,d,e){this.x=a,this.y=b,this._id=Math.floor(1e19*Math.random()).toString(32),this.outs=[],this.layer=e||0,this.isRetina=!e||0===e,this.num=d,this.isOn=.9<Math.random(),this.inpNum=0,this.inpLastTime=0,this.isOut=!1}pickOut(){return this.outs[this.outs.weightedRandom("strength")]}}class Connection{constructor(a,b,d,e){this.strength=e,this.from=a,this._id=Math.floor(1e19*Math.random()).toString(32),this.targLayer=d,this.to=b}}const mainComp=new Vue({data:{showBrain:!1,brainReady:!1,brain:{layers:[],lastPath:[]},brainTimer:null,isLearning:!1,doneLearning:!1,layers:4,rounds:{total:0,megaRepeatTotal:5,megaRepeatCurr:0,roundsPerImgCycle:5,roundsThisImageCycle:0,imgCycles:5,currImgCycle:0},maxInputs:0,allActive:[],maxNeuros:800,numNeuros:0,percCons:50,drawOn:!1,img:{w:20,h:20,data:null,filename:null,canv:document.getElementById("canv"),ctx:document.getElementById("canv").getContext("2d"),shouldBe:"zero"},score:{one:0,two:0,three:0,four:0,five:0,six:0,seven:0,eight:0,nine:0,zero:0},totalScores:[0,0],fList:{base:["zero","one","two","three","four","five","six","seven","eight","nine"],one:"1",two:"2",three:"3",four:"4",five:"5",six:"6",seven:"7",eight:"8",nine:"9",zero:"0",current:[0,0]},emergencyStop:!1},methods:{tryImg:function(){const a=document.getElementById("drawCanv"),b=document.getElementById("canv"),d=b.getContext("2d"),e=this;d.drawImage(a,0,0,20,20),e.brainTimer=setTimeout(function(){e.brainCycle(!0)},50)},drawStuff:function(a){if(this.drawOn){const b=document.getElementById("drawCanv"),d=b.getContext("2d");d.fillStyle="#000",d.fillRect(a.offsetX-2,a.offsetY-2,4,4)}},nextFile:function(a){const b=this;if(a)return"./img/zero/1a0.png";if(5==b.fList.current[1]){if(b.fList.current[0]++,b.fList.current[1]=0,9<b.fList.current[0]&&b.rounds.megaRepeatCurr>=b.rounds.megaRepeatTotal)return b.isLearning=!1,"DONE";9<b.fList.current[0]&&(b.rounds.megaRepeatCurr++,b.fList.current=[0,0])}else b.fList.current[1]++;const d=b.fList.base[b.fList.current[0]];return b.img.shouldBe=d,`./img/${d}/${b.fList.current[1]+1}a${b.fList[d]}.png`},brainCycle:function(a){var b=Math.max;const d=this;if(d.emergencyStop)return d.emergencyStop=!1,!1;if(d.rounds.roundsThisImageCycle>=d.rounds.roundsPerImgCycle&&d.rounds.currImgCycle>=d.rounds.imgCycles||0===d.rounds.total)return(d.rounds.total++,d.rounds.roundsThisImageCycle=0,a&&alert("Your scores are",d.score),d.img.filename=d.nextFile(!d.img.data),"DONE"==d.img.filename)?(d.doneLearning=!0,alert("Done learning (probly)!")):(d.score={one:0,two:0,three:0,four:0,five:0,six:0,seven:0,eight:0,nine:0,zero:0},d.rounds.currImgCycle=0,d.handleFile(d.img.filename));if(d.rounds.roundsThisImageCycle>=d.rounds.roundsPerImgCycle)return d.rounds.roundsThisImageCycle=0,d.rounds.currImgCycle++,d.scoreCheck(d.score,d.img.shouldBe),a&&alert("Your scores are",d.score),d.score={one:0,two:0,three:0,four:0,five:0,six:0,seven:0,eight:0,nine:0,zero:0},d.brainTimer=setTimeout(function(){d.brainCycle(a)},50);else{if(d.retina(),d.rounds.roundsThisImageCycle++,d.allActive=d.brain.layers.map(a=>a.filter(a=>!!a.isOn).map((a,b)=>b)),d.brain.layers.forEach(a=>{a.forEach(a=>{a.isOn=!1,a.inpNum=0})}),d.allActive.forEach((a,b)=>{a.forEach(a=>{if(!!d.brain.layers[b][a].isOut)return!1;let e=.95<Math.random()?2:1;0<d.maxInputs&&(e=1<a.inpLastTime||.965<Math.random()?2:1);let f=Array(e).fill(100).map(()=>d.brain.layers[b][a].pickOut()),g=f.map(e=>(d.brain.lastPath.push([b,a,e._id]),d.brain.layers[e.targLayer].find(a=>a._id==e.to)));if(!!g.filter(a=>!a).length)throw new Error("Cannot find target neuron!");g.forEach(a=>{a.isOn=!0,a.isOut&&d.score[a.name]++,a.inpNum++})})}),d.brain.layers.forEach(a=>{a.forEach(a=>{a.inpLastTime=a.inpNum||0})}),d.rounds.total++,10<d.rounds.total){let a=b(...d.brain.layers.map(a=>b(...a.map(a=>a.inpNum))));d.maxInputs<a&&(d.maxInputs=a)}const e=d.allActive.reduce((d,a)=>({length:d.length+a.length}));e.length||(clearInterval(d.brainTimer),alert("Brain death!")),e.length>=.95*d.numNeuros&&(clearInterval(d.brainTimer),alert("Death due to overbraining")),d.brainTimer=setTimeout(function(){d.brainCycle(a)},50)}},learn:function(){const a=this;a.isLearning=!0,a.brainTimer=setTimeout(function(){a.brainCycle()},50)},handleFile:function(a){const b=this;b.img.data="HAZ STUFF";const d=new Image,e=document.getElementById("canv"),f=e.getContext("2d");d.onload=function(){f.drawImage(d,0,0,20,20),b.scoreCheck(b.score,b.img.shouldBe),b.brainTimer=setTimeout(function(){b.brainCycle()},50)},d.crossOrigin="Anonymous",d.src=a,d.onerror=function(a){console.log("img load error!",a)}},retina:function(){const a=this,b=document.getElementById("canv"),d=b.getContext("2d"),e=d.getImageData(0,0,b.width,b.height);a.brain.layers[0].forEach((a,b)=>{let d={r:e.data[4*b],g:e.data[4*b]+1,b:e.data[4*b]+2,l:0};d.l=(.299*d.r+.587*d.g+.114*d.b)/255,a.isOn=.5>d.l})},scoreCheck:function(a,b){const d=Object.keys(a),e=this,f=Math.max(...d.map(b=>a[b])),g=d.filter(b=>a[b]==f);let h=1;g==b?(h=.01,e.totalScores[0]++):(h=-.01,e.totalScores[1]++),e.brain.lastPath.forEach(a=>{let b=e.brain.layers[a[0]][a[1]],d=b.outs.find(b=>b._id==a[2]);!d||(d.strength+=h)}),console.log("Clearing brain. Image Repeat",e.rounds.roundsThisImageCycle,"of",e.rounds.roundsPerImgCycle,"and filename",e.img.filename),e.brain.lastPath=[]},createBrain:function(){if(this.brainReady){const a=confirm("Are you sure you wish to replace the current brain?");return!a||this.setupBrain(),!1}this.setupBrain()},setupBrain:function(){var d=Math.ceil,e=Math.floor;const f=this;console.log("self",f),f.brain.layers=[],f.brain.layers[0]=Array(f.img.w*f.img.h).fill(100).map((a,b)=>new Neuron(100*Math.random(),100*Math.random(),b,0)),f.numNeuros=f.img.w*f.img.h;const g=e((f.maxNeuros-f.numNeuros)/f.layers);let h=1;for(h;h<f.layers;h++)f.brain.layers[h]=Array(g).fill(100).map((a,b)=>new Neuron(100*Math.random(),100*Math.random(),b,h)),f.numNeuros+=g;f.brain.layers.push(Array(f.fList.base.length).fill(100).map((a,b)=>new Output(f.fList.base[b],b,f.brain.layers.length)));const i=f.maxNeuros*f.percCons/100;for(let a,h=0;h<f.layers;h++)a=Array(f.layers+1).fill(100).map((a,b)=>b).filter(a=>!!a&&a!=h),console.log("Other Layers",a,h),f.brain.layers[h].forEach((b,j)=>{console.log(`Connecting Neuron ${j} of ${h?g:f.img.w*f.img.h} for layer ${h+1} of ${f.layers+1}`);var k=d(Math.random()*i),l=[];for(c=0;c<k;c++){let d=a[e(Math.random()*a.length)],g=f.brain.layers[d].filter(a=>!l.includes(a._id)),h=g[e(Math.random()*g.length)];h&&(b.outs.push(new Connection(b._id,h._id,d,.1)),l.push(h._id))}});console.log(f),f.brainReady=!0}},created:function(){},computed:{totalNeuros:function(){return Math.ceil(this.maxNeuros*this.maxNeuros*this.percCons/100)}}}).$mount("#main");